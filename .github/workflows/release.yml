name: Release

on:
  push:
    branches:
      - master

jobs:
  build_jar:
    runs-on: ubuntu-latest
    outputs:
      jar-path: ${{ steps.set-path.outputs.jar-path }}
    steps:
      - uses: actions/checkout@v3

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: 8
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle', '**/gradle.lockfile') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build shadowJar
        run: ./gradlew clean shadowJar --no-daemon

      - name: Upload jar artifact
        uses: actions/upload-artifact@v4
        with:
          name: 530-Editor-jar
          path: build/libs/530-Editor.jar

      - id: set-path
        run: echo "jar-path=build/libs/530-Editor.jar" >> $GITHUB_OUTPUT

  create_release:
    needs: build_jar
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Fetch all tags
        run: git fetch --prune --unshallow --tags

      - name: Download jar artifact
        uses: actions/download-artifact@v4
        with:
          name: 530-Editor-jar
          path: build/libs/530-Editor-jar

      - name: Setup git user
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Get latest tag and create new tag
        id: tag
        run: |
          latest_tag=$(git tag --list "v*" --sort=-v:refname | head -n1)
          if [ -z "$latest_tag" ]; then
            latest_tag="v0.0.0"
          fi
          IFS="." read -r major minor patch <<<"${latest_tag#v}"
          patch=$((patch + 1))
          new_tag="v${major}.${minor}.${patch}"
          echo "Latest tag: $latest_tag"
          echo "New tag: $new_tag"
          git tag "$new_tag"
          git push origin "$new_tag"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Create GitHub Release with artifact
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.new_tag }}
          name: ${{ steps.tag.outputs.new_tag }}
          body: "Release ${{ steps.tag.outputs.new_tag }}"
          files: build/libs/530-Editor-jar/530-Editor.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
